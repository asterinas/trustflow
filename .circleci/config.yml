# Copyright 2024 Ant Group Co., Ltd.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

setup: true

parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""
  GHA_Mode:
    type: string
    default: ""
  GHA_Version:
    type: string
    default: ""

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  linux_ut:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: secretflow/trustflow-dev-ubuntu22.04:latest
    resource_class: 2xlarge+
    shell: /bin/bash --login -eo pipefail
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "build and test"
          command: |
            set -ex
            mkdir -p ~/.ssh && ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
            bazel --output_base=target build //trustflow/...
            bazel --output_base=target test //trustflow/...
            bazel --output_base=target test //trustflow/... --features=asan
  docker_image_publish:
    docker:
      - image: cimg/deploy:2023.06.1
    resource_class: 2xlarge+
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and Push Docker image
          command: |
            MODE=<< pipeline.parameters.GHA_Mode >>
            COMMON_VERSION=<< pipeline.parameters.GHA_Version >>
            OCCLUM_VERSION=occlum0.30.1-<< pipeline.parameters.GHA_Version >>
            OCCLUM_BASE_IMAGE=secretflow/occlum:0.30.1-rt-ubuntu22.04

            # login docker
            docker login -u secretflow -p ${DOCKER_DEPLOY_TOKEN}
            # login docker - aliyun
            docker login -u ${ALIYUN_DOCKER_USERNAME} -p ${ALIYUN_DOCKER_PASSWORD} secretflow-registry.cn-hangzhou.cr.aliyuncs.com

            case "$MODE" in
              common)
                echo "build and publish in common mode, version: ${COMMON_VERSION}"
                pushd docker
                docker build -f trustflow-dev-ubuntu22.04.Dockerfile -t secretflow/trustflow-dev-ubuntu22.04:${COMMON_VERSION} .
                docker tag secretflow/trustflow-dev-ubuntu22.04:${COMMON_VERSION} secretflow/trustflow-dev-ubuntu22.04:latest
                docker push secretflow/trustflow-dev-ubuntu22.04:${COMMON_VERSION}
                docker push secretflow/trustflow-dev-ubuntu22.04:latest
                # push to aliyun
                docker tag secretflow/trustflow-dev-ubuntu22.04:${COMMON_VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-dev-ubuntu22.04:${COMMON_VERSION}
                docker tag secretflow/trustflow-dev-ubuntu22.04:${COMMON_VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-dev-ubuntu22.04:latest
                docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-dev-ubuntu22.04:${COMMON_VERSION}
                docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-dev-ubuntu22.04:latest

                docker build -f trustflow-release-ubuntu22.04.Dockerfile -t secretflow/trustflow-release-ubuntu22.04:${COMMON_VERSION} .
                docker tag secretflow/trustflow-release-ubuntu22.04:${COMMON_VERSION} secretflow/trustflow-release-ubuntu22.04:latest
                docker push secretflow/trustflow-release-ubuntu22.04:${COMMON_VERSION}
                docker push secretflow/trustflow-release-ubuntu22.04:latest
                # push to aliyun
                docker tag secretflow/trustflow-release-ubuntu22.04:${COMMON_VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-release-ubuntu22.04:${COMMON_VERSION}
                docker tag secretflow/trustflow-release-ubuntu22.04:${COMMON_VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-release-ubuntu22.04:latest
                docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-release-ubuntu22.04:${COMMON_VERSION}
                docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-release-ubuntu22.04:latest
                popd
                ;;
              occlum)
                echo "build and publish in occlum mode, version: ${OCCLUM_VERSION}"
                pushd docker
                docker build -f trustflow-dev-ubuntu22.04.Dockerfile --build-arg BASE_IMAGE=${OCCLUM_BASE_IMAGE} -t secretflow/trustflow-dev-occlum-ubuntu22.04:${OCCLUM_VERSION} .
                docker tag secretflow/trustflow-dev-occlum-ubuntu22.04:${OCCLUM_VERSION} secretflow/trustflow-dev-occlum-ubuntu22.04:latest
                docker push secretflow/trustflow-dev-occlum-ubuntu22.04:${OCCLUM_VERSION}
                docker push secretflow/trustflow-dev-occlum-ubuntu22.04:latest
                # push to aliyun
                docker tag secretflow/trustflow-dev-occlum-ubuntu22.04:${OCCLUM_VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-dev-occlum-ubuntu22.04:${OCCLUM_VERSION}
                docker tag secretflow/trustflow-dev-occlum-ubuntu22.04:${OCCLUM_VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-dev-occlum-ubuntu22.04:latest
                docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-dev-occlum-ubuntu22.04:${OCCLUM_VERSION}
                docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-dev-occlum-ubuntu22.04:latest

                docker build -f trustflow-release-ubuntu22.04.Dockerfile --build-arg BASE_IMAGE=${OCCLUM_BASE_IMAGE} -t secretflow/trustflow-release-occlum-ubuntu22.04:${OCCLUM_VERSION} .
                docker tag secretflow/trustflow-release-occlum-ubuntu22.04:${OCCLUM_VERSION} secretflow/trustflow-release-occlum-ubuntu22.04:latest
                docker push secretflow/trustflow-release-occlum-ubuntu22.04:${OCCLUM_VERSION}
                docker push secretflow/trustflow-release-occlum-ubuntu22.04:latest
                # push to aliyun
                docker tag secretflow/trustflow-release-occlum-ubuntu22.04:${OCCLUM_VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-release-occlum-ubuntu22.04:${OCCLUM_VERSION} 
                docker tag secretflow/trustflow-release-occlum-ubuntu22.04:${OCCLUM_VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-release-occlum-ubuntu22.04:latest
                docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-release-occlum-ubuntu22.04:${OCCLUM_VERSION}
                docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/trustflow-release-occlum-ubuntu22.04:latest
                popd
                ;;
              *)
                echo "Mode err, should be common or occlum, but got $MODE"
                exit 1
                ;;
            esac
  pypi_publish:
    docker:
      - image: secretflow/trustflow-dev-ubuntu22.04:latest
    resource_class: 2xlarge+
    parameters:
      python_ver:
        type: string
    shell: /bin/bash --login -eo pipefail
    steps:
      - checkout
      - run:
          name: "build package and publish"
          command: |
            source /root/miniconda3/etc/profile.d/conda.sh
            which protoc
            conda create -n build python=<< parameters.python_ver >> -y
            conda activate build
            
            pip install -r dev-requirements.txt

            # verification package
            export PACKAGE_TYPE=verification
            python setup.py build_ext
            python setup.py bdist_wheel && twine check dist/*

            # generation package
            export PACKAGE_TYPE=generation
            export TEE_TYPE=sgx2
            python setup.py build_ext
            python setup.py bdist_wheel && twine check dist/*

            export TEE_TYPE=tdx
            python setup.py build_ext
            python setup.py bdist_wheel && twine check dist/*

            export TEE_TYPE=csv
            python setup.py build_ext
            python setup.py bdist_wheel && twine check dist/*

            python3 -m twine upload -r pypi -u __token__ -p ${PYPI_TWINE_TOKEN} dist/*.whl

  wasm_verifier_publish:
    docker:
      - image: secretflow/trustflow-dev-ubuntu22.04:latest
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: "build wasm"
          command: |
            source ~/.bashrc
            source /opt/emsdk/emsdk_env.sh
            export PATH=/root/go/bin:/root/.local/bin:$PATH
            protoc --version
            VERSION=<< pipeline.parameters.GHA_Version >>
            echo "version: $VERSION"
            cmake -H. -Bbuild
            cd build && make -j8
            go install github.com/tcnksm/ghr@latest
            cd ..
            ghr -t "${GITHUB_TOKEN}" -u "${CIRCLE_PROJECT_USERNAME}" \
                -r "${CIRCLE_PROJECT_REPONAME}" -c "${CIRCLE_SHA1}" "${VERSION}" \
                build/trustflow/attestation/verification/trustflow_verifier.js

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  ut-workflow:
    when:
      not: << pipeline.parameters.GHA_Action >>
    jobs:
      - linux_ut
  wasm-verifier-publish-workflow:
    when:
      and:
        - equal: ["wasm_verifier_publish", << pipeline.parameters.GHA_Action >>]
        - exits: << pipeline.parameters.GHA_Version >>
    jobs:
      - wasm_verifier_publish
  docker-image-publish-workflow:
    when:
      and:
        - equal: ["docker_image_publish", << pipeline.parameters.GHA_Action >>]
        - exits: << pipeline.parameters.GHA_Mode >>
        - exits: << pipeline.parameters.GHA_Version >>
    jobs:
      - docker_image_publish
  pypi-publish-workflow:
    when:
      equal: ["pypi_publish", << pipeline.parameters.GHA_Action >>]
    jobs:
      - pypi_publish:
          matrix:
            parameters:
              python_ver: ["3.10"]